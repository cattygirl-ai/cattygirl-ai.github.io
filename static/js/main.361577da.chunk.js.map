{"version":3,"sources":["reportWebVitals.js","clothing-recommendation.tsx","mocks/mock-weather.ts","app.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ClothingRecommendation","props","RECOMMENDATION_MAP","Map","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","state","weather","this","setState","temp","main","Array","from","keys","key","get","className","getCurrentRecommendation","React","Component","MOCK_WEATHER","coord","lon","lat","id","description","icon","base","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","gust","clouds","all","dt","sys","type","country","sunrise","sunset","timezone","name","cod","api","App","query","search","bind","searchHandler","result","event","console","log","cityName","fetch","res","json","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","placeholder","value","onChange","e","target","onKeyPress","constructDate","Date","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.361577da.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { CurrentWeather } from \"./current-weather\";\n\nexport interface ClothingProps {\n    weather: CurrentWeather;\n}\n\nexport interface ClothingState {\n    weather: CurrentWeather;\n}\n\nexport class ClothingRecommendation extends React.Component<\n    ClothingProps,\n    ClothingState\n> {\n    private RECOMMENDATION_MAP: Map<number[], string> = new Map([\n        [\n            [16, Number.POSITIVE_INFINITY],\n            \"Consider wearing: A half sleeved t-shirt or blouse paired with cropped bottoms such as shorts or a skirt, or opt for a dress instead\",\n        ],\n        [\n            [11, 15],\n            \"Consider wearing: A thick sweater, hoodie or full sleeved shirt with long bottoms(i.e. leggings, jeans or trousers)\",\n        ],\n        [\n            [1, 10],\n            \"Consider wearing: A light coat(i.e. a denim jacket, leather jacket) over a hoodie, t-shirt or dress and pair it with some long trousers, jeans or leggings\",\n        ],\n        [\n            [Number.NEGATIVE_INFINITY, 0],\n            \"Consider wearing: A heavy jacket(i.e. a winter coat, parka) over a thick hoodie/sweater or full sleeved shirt paired with winter boots and a hat and gloves\",\n        ],\n    ]);\n\n    constructor(props: ClothingProps) {\n        super(props);\n        this.state = {\n            weather: props.weather,\n        };\n    }\n\n    setWeather(weather: CurrentWeather): void {\n        // anything else?\n        this.setState({ weather });\n    }\n\n    getCurrentRecommendation(): string | undefined {\n        const temp = this.state.weather.main.temp;\n        for (let key of Array.from(this.RECOMMENDATION_MAP.keys())) {\n            if (key[0] <= temp && temp <= key[1]) {\n                return this.RECOMMENDATION_MAP.get(key);\n            }\n        }\n        return undefined;\n    }\n\n    render() {\n        return (\n            <div className=\"clothing-recommendation\">\n                {this.getCurrentRecommendation()}\n            </div>\n        );\n    }\n}\n","import { CurrentWeather } from \"../current-weather\";\n\nexport const MOCK_WEATHER: CurrentWeather = {\n    coord: {\n        lon: -79.4163,\n        lat: 43.7001,\n    },\n    weather: [\n        {\n            id: 801,\n            main: \"Clouds\",\n            description: \"few clouds\",\n            icon: \"02n\",\n        },\n    ],\n    base: \"stations\",\n    main: {\n        temp: 40,\n        feels_like: 29.79,\n        temp_min: 22.54,\n        temp_max: 29.06,\n        pressure: 1012,\n        humidity: 74,\n    },\n    visibility: 10000,\n    wind: {\n        speed: 2.24,\n        deg: 225,\n        gust: 7.15,\n    },\n    clouds: {\n        all: 20,\n    },\n    dt: 1630283513,\n    sys: {\n        type: 1,\n        id: 718,\n        country: \"CA\",\n        sunrise: 1630233502,\n        sunset: 1630281546,\n    },\n    timezone: -14400,\n    id: 6167865,\n    name: \"Toronto\",\n    cod: 200,\n};\n","import React, { KeyboardEvent } from \"react\";\nimport { ClothingRecommendation } from \"./clothing-recommendation\";\nimport { CurrentWeather } from \"./current-weather\";\nimport { MOCK_WEATHER } from \"./mocks/mock-weather\";\n\nconst api = {\n    key: \"9651681a74f791de18e4098653e01dae\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\ninterface AppState {\n    query: string;\n    weather: CurrentWeather;\n}\n\nclass App extends React.Component<{}, AppState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            query: \"\",\n            weather: MOCK_WEATHER, // rethink, maybe blank is better\n        };\n        this.search = this.search.bind(this);\n        this.searchHandler = this.searchHandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.search(\"Toronto\").then((result) => {\n            this.setState({ weather: result });\n        });\n    }\n\n    private searchHandler(event: KeyboardEvent<HTMLInputElement>) {\n        if (event.key === \"Enter\") {\n            this.search(this.state.query).then((result) => {\n                this.setState({\n                    query: \"\",\n                    weather: result,\n                });\n                console.log(result);\n            });\n        }\n    }\n\n    private search(cityName: string): Promise<CurrentWeather> {\n        return fetch(\n            `${api.base}weather?q=${cityName}&units=metric&APPID=${api.key}`\n        ).then((res) => res.json());\n    }\n\n    private constructDate(d: Date): string {\n        let months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\",\n        ];\n        let days = [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n        ];\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n\n        return `${day} ${date} ${month} ${year}`;\n    }\n\n    render() {\n        return (\n            <div\n                className={\n                    this.state.weather.main\n                        ? this.state.weather.main.temp > 16\n                            ? \"app warm\"\n                            : \"app\"\n                        : \"app\"\n                }\n            >\n                <main>\n                    <div className=\"search-box\">\n                        <input\n                            type=\"text\"\n                            className=\"search-bar\"\n                            placeholder=\"Search...\"\n                            value={this.state.query}\n                            onChange={(e) =>\n                                this.setState({ query: e.target.value })\n                            }\n                            onKeyPress={this.searchHandler}\n                        />\n                    </div>\n                    {typeof this.state.weather.main ? (\n                        <div>\n                            <div className=\"location-box\">\n                                <div className=\"location\">\n                                    {this.state.weather.name},{\" \"}\n                                    {this.state.weather.sys.country}\n                                </div>\n                                <div className=\"date\">\n                                    {this.constructDate(new Date())}\n                                </div>\n                            </div>\n                            <div className=\"weather-box\">\n                                <div className=\"temp\">\n                                    {Math.round(this.state.weather.main.temp)}°c\n                                </div>\n                                <div className=\"weather\">\n                                    {this.state.weather.weather[0].main}\n                                </div>\n                            </div>\n\n                            <ClothingRecommendation weather={this.state.weather} />\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </main>\n            </div>\n        );\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}